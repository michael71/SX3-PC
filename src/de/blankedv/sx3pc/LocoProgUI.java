/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LocoProgUI.java
 *
 * Created on 14.02.2012, 16:29:33
 */

package de.blankedv.sx3pc;

/**
 *
 * @author mblank
 */

import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import static de.blankedv.sx3pc.MainUI.*;

public class LocoProgUI extends javax.swing.JFrame {
    private static final long serialVersionUID = 5313123456414L;
    private Preferences prefs;
    private static final byte BIT6 = 64;

    /** Creates new form LocoProgUI */
    public LocoProgUI() {
        initComponents();
        this.setVisible(true);
        prefs = Preferences.userNodeForPackage(this.getClass());
        loadPrefs();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAddress = new javax.swing.JLabel();
        comboSelAddress = new javax.swing.JComboBox<>();
        btnRead = new javax.swing.JButton();
        btnWrite = new javax.swing.JButton();

        setTitle("Lok Programmierung");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblAddress.setText("Adr");

        comboSelAddress.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "111" }));
        comboSelAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSelAddressActionPerformed(evt);
            }
        });

        btnRead.setText("Lesen");
        btnRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadActionPerformed(evt);
            }
        });

        btnWrite.setText("Schreiben");
        btnWrite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWriteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(lblAddress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboSelAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(btnRead, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(71, 71, 71)
                .addComponent(btnWrite, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboSelAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnWrite)
                    .addComponent(btnRead))
                .addGap(64, 64, 64))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboSelAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSelAddressActionPerformed
      //  int new_adr = Integer.parseInt(comboSelAddress.getSelectedItem().toString());
//        if (new_adr != lok_adr) {
//            // only if changed
//            sx.removeFromPlist(lok_adr);
//        }
//        lok_adr = new_adr;
      //  System.out.println("locoProg.lok adr=" + new_adr);
//        sx.addToPlist(lok_adr);
//        update();  // re-init nach neuer Adresse
}//GEN-LAST:event_comboSelAddressActionPerformed

    private void btnReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadActionPerformed
//        Ablauf:
//
//Lesen Zustandskanal (Adr. 109) und prüfen, ob Programmierfunktion frei ist oder bereits von anderem Gerät benutzt
//wird (Bit 6 = 0)
        if ((sxData[109][0] & 64) != 0) {
            System.out.println("Error: Programmierung bereits aktiv");
            return;
        }
       // if (!sxiConnected) System.out.println("Fehler: keine Verbindung zur Zentrale");
//Prüfen Gleisspannung Aus ( Bit 7 = 0 ). Wenn Gleisspannung Ein, ZE über Betriebsstatus ( Adr. 127 ) ausschalten
        Byte[] b = {(byte) (127 + 128), 0 };  // bit 7 muss gesetzt sein zum Schreiben
 //       sxi.send(b);
        
 //       sleepSomeMillis();
 //       b[0] = (byte) (109+128);
 //       b[1] = 96;
 //       sxi.send(b);
  //       sleepSomeMillis();
//Programmierfunktion über Anforderungskanal (Adr. 106, Bit 6=1) anfordern
        b[0] = (byte) (106 + 128);
        b[1] = (byte)(64) ;
     //   sxi.send(b,0);
        int count = 0;
        while ( count < 10) { //(sxData[109] & (32)) == 0)   {
            // TODO hier sollte noch auf Bit6=1 ge-checked werden.
            //Nach ca. 2 Sekunden erfolgt Rückmeldung „Programmierfunktion bereit“ über den Zustandskanal
            //(Lesen Adr. 109, Bit 6 = 1; Programmierfunktion geschaltet und Bit 5 = 1; bereit)

      //     b[0] = (byte) (109);
      //      b[1] = 0;
      //      sxi.send(b);
            sleepSomeMillis();
            count++;
            // TODO endloschleife muss noch vermieden werden
        }
        b[0] = (byte) (106 + 128);
        b[1] = (byte)(128+64+1) ;
     //   sxi.send(b,0);
//5. L e s e n D e c o d e r – D a t e n
//5.1 Setzen Anforderungskanal 106, Bit 0-2 = 001; Modus Selectrix, Bit 3 = 0; Lesen, Bit 7 = 1; Befehl ausführen
//5.2 Nach ca. 2 Sekunden ist lesen erfolgt (Zustandskanal Adr. 109, Bit 5 = 1; bereit), die Decoder-Daten stehen in Adr. 104 und 105
//bereit
 count = 0;
        while ( (sxData[109][0] & (32)) != 0)   {

            //Nach ca. 2 Sekunden erfolgt Rückmeldung „Programmierfunktion bereit“ über den Zustandskanal
            //(Lesen Adr. 109, Bit 6 = 1; Programmierfunktion geschaltet und Bit 5 = 1; bereit)

      //     b[0] = (byte) (109);
      //      b[1] = 0;
      //      sxi.send(b);
            sleepSomeMillis();
            count++;
            // TODO endloschleife muss noch vermieden werden
        }
        // in 104 und 105 sind jetzt die Dekoder Daten
        comboSelAddress.setSelectedIndex((0x7F & sxData[105][0])-1);
        // programmieren aus
        b[0] = (byte) (106 + 128);
        b[1] = (byte)(0) ;
     //   sxi.send(b,0);
//6
//Decoder Programmieren
//Schreiben der neuen Decoder-Daten in Adresse 104 und 105
//Setzen Anforderungskanal Adresse 106, Bit 0 bis 2 = 001(Modus Selectrix), Bit 3 = 1 (Programmieren), Bit 7 = 1 (Befehl
//ausführen)
//Warten bis Zustandskanal Adresse 109, Bit 5 = 1; bereit
//Vor dem Verlassen der Programmierfunktion; löschen Programmierung im Anforderungskanal Adr. 106, Bit 6 = 0
    //    b[0] = (byte) (109 + 128);
    //   b[1] = 0;  // kanal 109 wieder zurücksetzen
    //    sxi.send(b);
        
}//GEN-LAST:event_btnReadActionPerformed

    private void btnWriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWriteActionPerformed
        // TODO add your handling code here:
       
}//GEN-LAST:event_btnWriteActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        savePrefs();
        locoprog = null;  // to enable opening a LocoProgUI window again in Interface UI
    }//GEN-LAST:event_formWindowClosing
  private void savePrefs() {
        // fuer SX3 Programm, zB Belegtmelder: Instanz-Nummer (Klassenvariable) mit im
        // String, um mehrere Fensterpositionen zu speichern
        // auch SX-adresse jeweils speichern.
        String myInst = "LP";
        prefs.putInt(myInst + "windowX", getX());
        prefs.putInt(myInst + "windowY", getY());

    }

    private void loadPrefs() {
        // reload the positions for the right instance
        String myInst = "LP";

        setLocation(prefs.getInt(myInst + "windowX", 200), prefs.getInt(myInst + "windowY", 200));
        //l1.setLok_adr(prefs.getInt(myInst + "adr1", 1));
        //xbeeSerialPort = prefs.get("radioPort", "");
        //setSize(prefs.getInt("width", 500),prefs.getInt("height",300));
    }

    private void sleepSomeMillis() {
        try {
            Thread.sleep(200);
        } catch (InterruptedException ex) {
            Logger.getLogger(LocoProgUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRead;
    private javax.swing.JButton btnWrite;
    private javax.swing.JComboBox<String> comboSelAddress;
    private javax.swing.JLabel lblAddress;
    // End of variables declaration//GEN-END:variables

}
