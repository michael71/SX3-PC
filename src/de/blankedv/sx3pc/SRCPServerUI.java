/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SRCPServerUI.java
 *
 * Created on 13.04.2011, 08:36:15
 */
package de.blankedv.sx3pc;

import java.util.Scanner;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.ServerSocket;
import java.util.List;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;

import static de.blankedv.sx3pc.InterfaceUI.*;

/**
 *
 * @author mblank
 */
public class SRCPServerUI extends javax.swing.JFrame {

    private static final long serialVersionUID = 5313123456416L;
    private ServerSocket s;
    static SRCPServer server;
    private static final int SRCP_PORT = 4303;
    // Preferences
    Preferences prefs = Preferences.userNodeForPackage(this.getClass());
    protected Thread t;

    /**
     * Creates new form SRCPServerUI
     */
    public SRCPServerUI() {
        initComponents();
        loadPrefs();
        List<InetAddress> myip = NIC.getmyip();   // only the first one will be used
        if (!myip.isEmpty()) {
        try {
            s = new ServerSocket(SRCP_PORT);
            System.out.println("new SRCP server socket, port="+SRCP_PORT);
        } catch (IOException ex) {
            System.out.println("could not open SRCP server socket on port="+
                    SRCP_PORT+" - closing SXnet window.");
            JOptionPane.showMessageDialog(null, 
                    "could not open SRCP server socket!\n" + ex.toString(), 
                    "Error", JOptionPane.OK_CANCEL_OPTION);
            return;
        }
        startServer();
        setVisible(true);
        }
    }

    public void displayMessage(String s) {
        taClients.append(s + "\"");
    }

    private void startServer() {
        if (server == null) {
            server = new SRCPServer();
            t = new Thread(server);
            t.start();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taClients = new javax.swing.JTextArea();

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("SRCP Server");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("accepting SRCP clients at port 4303");

        taClients.setEditable(false);
        taClients.setColumns(20);
        taClients.setRows(3);
        jScrollPane2.setViewportView(taClients);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        savePrefs();
        System.out.println("SRCP server closed.");
        setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public void savePrefs() {
        // fuer SX3 Programm, zB Belegtmelder: Instanz-Nummer (Klassenvariable) mit im
        // Pfad, um mehrere Fensterpositionen zu speichern
        // auch SX-adresse jeweils speichern.
        prefs.putInt("SRCPwindowX", getX());
        prefs.putInt("SRCPwindowY", getY());
    }

    private void loadPrefs() {
        setLocation(prefs.getInt("SRCPwindowX", 200), prefs.getInt("SRCPwindowY", 200));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTextArea taClients;
    // End of variables declaration//GEN-END:variables

    class SRCPServer implements Runnable {

        public void run() {
            try {
                while (running) {
                    Socket incoming = s.accept();  // wait for client to connect
                    taClients.append("new client connected " + incoming.getRemoteSocketAddress().toString() + "\n");
                    // after new client has connected start new thread to handle this client
                    Runnable r = new SRCPSession(incoming);
                    Thread t = new Thread(r);
                    t.start();
                }
            } catch (InterruptedIOException e1) {
                try {
                    System.out.println("SRCP Server interrupted, closing socket");
                    s.close();
                } catch (IOException ex) {
                    System.out.println("closing error " + ex);
                }
            } catch (IOException ex) {
                System.out.println("SRCPServer error:" + ex);
            }

        }
    }
}
